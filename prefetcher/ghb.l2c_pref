//
// Created by Umasou on 2021/5/25.
//

#include "cache.h"
#include <map>
#include <vector>
#include <queue>
#include <cstdlib>
#include <iostream>
#include <string>
#include "log.h"
#include "champsim_tool.h"

using namespace std;

ChampSimLog cslog("log.txt");

#define IT_SIZE 256
#define GHB_SIZE 256
#define random(x)(rand()%x)
#define is_log 0


uint64_t old_prefetch_useful = 0;
uint64_t old_prefetch_issued = 0;
int instruction_num = 0;
int num_of_late_prefetches = 0;
int PREFETCH_LOOK_AHEAD = 4;
int PREFETCH_DEGREE = 4;

struct ghb_entry{
    uint64_t cache_line_addr;
    uint64_t ip;
    ghb_entry *prev_ptr;
    ghb_entry(int64_t addr, int64_t ip):cache_line_addr(addr), ip(ip),prev_ptr(nullptr){}
};

struct ip_lru{
    uint64_t ip;
    uint32_t lru;
};

class GHB{
public:
    map<uint64_t, ghb_entry*> it_table;

    queue<ghb_entry*> ghb_table;

    ip_lru ip_lru_table[IT_SIZE];
public:
    GHB(){
        for (int i=0; i<IT_SIZE; i++)
            ip_lru_table[i].lru = i;
    }

    vector<uint64_t> trigger(uint64_t addr, uint64_t ip){
        //make prefetch
        vector<uint64_t> prefetch_addr;
        uint64_t  delta = getDelta(ip);
        cslog.makeLog(string("delta " + to_string(delta)), is_log);
        if (0 != delta){
            for (int i = 0; i < PREFETCH_DEGREE; ++i) {
                uint64_t pf_address = ((addr >> LOG2_BLOCK_SIZE) + (delta*(i+PREFETCH_LOOK_AHEAD))) << LOG2_BLOCK_SIZE;
                // only issue a prefetch if the prefetch address is in the same 4 KB page
                // as the current demand access address
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;
                prefetch_addr.push_back(pf_address);
            }
        }
        //add addr 2 ghb
        ghbAddNewEntry((addr>>LOG2_BLOCK_SIZE), ip);
        return prefetch_addr;
    }

//    vector<uint64_t> findPrefetchAddress(uint64_t delta, uint64_t origin_addr){
//        vector<uint64_t> prefetch_addr;
//
//    }
private:
    void ghbAddNewEntry(uint64_t addr, uint64_t ip){
        ghb_entry *insert_entry = new ghb_entry(addr, ip);
        //insert ghb
        cslog.makeLog(string("Start insert ghb..."),is_log);
        if (GHB_SIZE == ghb_table.size()){
            //del ghb
            ghb_entry *del_entry = ghb_table.front();
            ghb_table.pop();
            //del point
            uint64_t del_entry_ip = del_entry->ip;
            if (it_table.end() != it_table.find(del_entry_ip)){
                ghb_entry *entry_with_same_ip = it_table[del_entry_ip];
                if (entry_with_same_ip == del_entry){
                    it_table.erase(ip);
                }else{
                    for (ghb_entry *ghb_pointer = entry_with_same_ip; ghb_pointer != nullptr; ghb_pointer = ghb_pointer->prev_ptr) {
                        if (ghb_pointer == del_entry){
                            ghb_pointer->prev_ptr = nullptr;
                            break;
                        }
                    }
                }
            }
        }
        ghb_table.push(insert_entry);
        //insert it
        cslog.makeLog(string("Start insert it"),is_log);
        if (it_table.end() != it_table.find(ip)){
            ghb_entry *entry_with_same_ip = it_table[ip];
            it_table[ip] = insert_entry;
            insert_entry->prev_ptr = entry_with_same_ip;
        }
        else{
            if (IT_SIZE == it_table.size()){
//                int index=0;
//                for (; index<IT_SIZE; index++) {
//                    if (ip_lru_table[index].lru == (IT_SIZE-1))
//                        break;
//                }
                it_table.erase(it_table.begin());
            }
            it_table.insert(make_pair(ip, insert_entry));
        }
        //insert ip_lru_table
        //insertIpLruTable(ip);
    }

    uint64_t getDelta(uint64_t ip){
        vector<uint64_t>history_addr;
        if (it_table.end() != it_table.find(ip)){
            ghb_entry *ip_entry = it_table[ip];
            for (int i = 0; i < 3; ++i) {
                history_addr.push_back(ip_entry->cache_line_addr);
                ip_entry = ip_entry->prev_ptr;
                if (nullptr == ip_entry){
                    break;
                }
            }
        }
        if (3 > history_addr.size()){
            return 0;
        }
        uint64_t delta1 = (history_addr[0] - history_addr[1]) % LOG2_PAGE_SIZE;
        uint64_t delta2 = (history_addr[1] - history_addr[2]) % LOG2_PAGE_SIZE;
        if (delta1 != delta2){
            return 0;
        }
        return delta1;
    }

    void insertIpLruTable(uint64_t ip){
        int index=0;
        for (; index<IT_SIZE; index++) {
            if (ip_lru_table[index].ip == ip)
                break;
        }
        //new ip
        if (index == IT_SIZE) {
            for (int index=0; index<IT_SIZE; index++) {
                if (ip_lru_table[index].lru == (IT_SIZE-1))
                    break;
            }
            ip_lru_table[index].ip = ip;
            for (int i=0; i<IT_SIZE; i++) {
                if (ip_lru_table[i].lru < ip_lru_table[index].lru)
                    ip_lru_table[i].lru++;
            }
            ip_lru_table[index].lru = 0;
            return ;
        }
        //old ip
        for (int i=0; i<IT_SIZE; i++) {
            if (ip_lru_table[i].lru < ip_lru_table[index].lru)
                ip_lru_table[i].lru++;
        }
        ip_lru_table[index].lru = 0;
    }
};

GHB *ghb = new GHB();

void CACHE::l2c_prefetcher_initialize()
{
    cout << "CPU " << cpu << " L2C GHB prefetcher" << endl;
    instruction_num = 0;
    cslog.makeLog(string("CPU " + to_string(cpu) + " L2C GHB prefetcher"), true);
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    //feedback
    //lateness
    float accuracy = 0;
    float lateness = 0;
    if(is_address_in_mshr(addr>>LOG2_BLOCK_SIZE)){
        num_of_late_prefetches += 1;
    }

    instruction_num += 1;
    if(0 == instruction_num % 1000){
        //accuracy
        if(0 == old_prefetch_issued){
            //uint64_t old_pf_useful, uint64_t new_pf_useful, uint64_t old_pf_issued, uint64_t new_pf_issued
            accuracy = Tool::calculate_prefetch_accuracy(0, pf_useful, 0, pf_issued);
        }
        else{
            accuracy = Tool::calculate_prefetch_accuracy(old_prefetch_useful, pf_useful, old_prefetch_issued, pf_issued);
        }
        old_prefetch_useful = pf_useful;
        old_prefetch_issued = pf_issued;
        //lateness
        cslog.makeLog(string("num_of_late_prefetches: " + to_string(num_of_late_prefetches) + " ;minus: " + to_string(lateness)), true);
        if(0 != (pf_useful - old_prefetch_useful)){
            lateness = (float)num_of_late_prefetches / (float)(pf_useful - old_prefetch_useful);
        }
        cslog.makeLog(string("accuracy: " + to_string(accuracy) + " ;lateness: " + to_string(lateness)), true);
        //reset
        instruction_num = 0;
        num_of_late_prefetches = 0;
        //debug
        cslog.makeLog(string("address :" + to_string(addr) + " ;cache line: " + to_string(addr>>LOG2_BLOCK_SIZE)), true);
        for (uint32_t index=0; index<MSHR_SIZE; index++)
        {
            cslog.makeLog(string("MSHR: address :" + to_string(MSHR.entry[index].address) + " ;type: " + to_string(MSHR.entry[index].type)), true);
        }
    }

    cslog.makeLog(string("Start prefetch: addr:" + to_string(addr) + ", ip:" + to_string(ip)),is_log);
    vector<uint64_t> prefetch_addr = ghb->trigger(addr, ip);

    for (int i = 0; i < prefetch_addr.size(); ++i) {
        cslog.makeLog(string("origin address: " + to_string(addr)),is_log);
        cslog.makeLog(string("prefetch address: " + to_string(prefetch_addr[i])),is_log);
        prefetch_line(ip, addr, prefetch_addr[i], FILL_L2, 0);
    }
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L2C GHB prefetcher final stats" << endl;
}
